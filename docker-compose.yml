services:
  traefik:
    image: traefik:${TRAEFIK_TAG}
    container_name: skynet_traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --api.dashboard=true
      - --entrypoints.web.address=:80
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/traefik.yml:ro
      - ./docker/traefik/dynamic:/dynamic:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${TRAEFIK_HOST}`)"
      - "traefik.http.routers.api.service=api@internal"
    networks:
      - skynet_net

  postgres:
    image: postgres:${POSTGRES_TAG}
    container_name: skynet_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skynet_net
      - keycloak_net

  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_TAG}
    container_name: skynet_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5051:80"
    networks:
      - skynet_net

  redis:
    image: redis:${REDIS_TAG}
    container_name: skynet_redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - skynet_net

  rabbitmq:
    image: rabbitmq:${RABBIT_TAG}
    container_name: skynet_rabbitmq
    ports:
      - "${RABBIT_AMQP_PORT}:5672"   # AMQP
      - "${RABBIT_MGMT_PORT}:15672"  # Management
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbit.rule=Host(`${RABBIT_HOST}`)"
      - "traefik.http.services.rabbit.loadbalancer.server.port=15672"
    networks:
      - skynet_net

  zipkin:
    image: openzipkin/zipkin:${ZIPKIN_TAG}
    container_name: skynet_zipkin
    ports:
      - "${ZIPKIN_PORT}:9411"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zipkin.rule=Host(`${ZIPKIN_HOST}`)"
      - "traefik.http.services.zipkin.loadbalancer.server.port=9411"
    networks:
      - skynet_net

  clients:
    build:
      context: ./services/clients-service
    container_name: skynet_clients
    env_file:
      - ./services/clients-service/.env
    environment:
      - NODE_ENV=production
    depends_on:
      - postgres
    ports:
      - "3000:3000"
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    networks:
      - skynet_net
      - keycloak_net

  visits:
    build:
      context: ./services/visits-service
    container_name: skynet_visits
    env_file:
      - ./services/visits-service/.env
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "3002:3001"
    networks:
      - skynet_net
      - keycloak_net

  notifications:
    build:
      context: ./services/notifications-service
    container_name: skynet_notifications
    env_file:
      - ./services/notifications-service/.env
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
    depends_on:
      redis:
        condition: service_started
      mailhog:
        condition: service_started
    ports:
      - "3003:3003"
    restart: unless-stopped
    networks:
      - skynet_net

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: skynet_mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: unless-stopped
    networks:
      - skynet_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025"]
      interval: 10s
      timeout: 3s
      retries: 10


networks:
  skynet_net:
    driver: bridge

  keycloak_net:
    external: true
    name: docker_default

volumes:
  pg_data:
  redis_data:
